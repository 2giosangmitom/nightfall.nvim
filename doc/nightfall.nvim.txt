*nightfall.nvim*   For Neovim version 0.9 and later   Last change: 2024 July 11

Nightfall.nvim is a meticulously crafted Neovim colorscheme designed to enhance
your coding experience. It offers a clean and minimalist design with multiple
flavors to match your coding style. Nightfall.nvim also focuses on reducing
eye strain and integrates seamlessly with major plugins.

Features ~
- Automatic caching ensures faster load times
- Comprehensive support for the `nvim-treesitter` syntax highlighting plugin
- Seamlessly integrates with LSP semantic tokens (requires Neovim 0.9 or later)
- Extensive support for many popular plugins, enhancing your Neovim experience
- Extensive customization options to personalize your experience
- Reduced eye strain for extended coding sessions
- Match your coding style with multiple flavors
- Improved code readability with a clean and minimalist design

Flavors ~
- Nightfall: A dark and vibrant variation inspired by the Dracula theme.
- Deeper Night: A more intense dark theme for those who prefer a starker
  contrast.
- Maron: A warm, brown-tinged dark theme, offering a softer feel for extended
  coding sessions.

------------------------------------------------------------------------------
                                                          *nightfall.nvim_setup*
Nightfall.nvim provides a comprehensive configuration system to personalize
your colorscheme experience. You can control various aspects like color
overrides, highlight group styling, integrations, and more. To configure
Nightfall.nvim, use the `require("nightfall").setup` function.

Parameters ~
{opts} `(optional)` `(table:)` Your desired Nightfall.nvim configuration options

Example:
>lua
  require("nightfall").setup({
    transparent = true,
    dim_inactive = true,
    integrations = {
      telescope = { enabled = true, style = "bordered" },
      flash = { enabled = true },
    },
  })
<
------------------------------------------------------------------------------
                                                          *nightfall.nvim_usage*
Nightfall.nvim provides two methods for dynamically loading specific color scheme
flavors, enabling you to switch between different styles based on your
preference. Supported variants: nightfall, deepernight and maron.

Note: It is crucial to configure Nightfall.nvim before loading the
color scheme to ensure proper integration and customization. Refer to
|nightfall.nvim_setup| for setup instructions.

1. Using `require("nightfall").load` function:

The `require("nightfall").load` function offers a convenient way to load the
Nightfall.nvim color scheme within your Neovim configuration.

Usage ~
>lua
  require("nightfall").load("nightfall")
<

2. Using `vim.cmd.colorscheme` function:

Neovim's built-in `vim.cmd.colorscheme` function provides a generic method for
loading any color scheme. It's a simple and versatile approach.

Usage ~
>lua
  vim.cmd.colorscheme("nightfall")
<
------------------------------------------------------------------------------
                                                *nightfall.nvim_compile_command*
This command compiles all themes provided by Nightfall.nvim into binary files,
potentially improving performance by reducing runtime overhead. It iterates
over each supported flavor, recompiles the theme, and notifies the user upon
successful compilation.

Usage ~
`:NightfallCompile`

------------------------------------------------------------------------------
                                                          *nightfall.nvim_debug*
This built-in Nightfall feature provides a real-time debugging experience for
your themes. When activated, it automatically recompiles and applies the
current Nightfall theme whenever you save a file within the `nightfall`
directory. This allows you to see the impact of your modifications instantly,
significantly improving your development workflow.

Note: Ensure `vim.g.nightfall_debug` is set to true for this functionality to
activate.

------------------------------------------------------------------------------
                                                       *nightfall.nvim_defaults*
Nightfall.nvim provides a comprehensive set of default configuration values
that define the appearance and behavior of the colorscheme. These defaults
can be overridden to tailor the colorscheme to your preferences and coding
workflow. For detailed instructions on overriding these defaults, please
refer to the documentation of the |nightfall.nvim_setup| function.

>lua
  local defaults = {
    compile_path = vim.fn.stdpath("cache") .. "/nightfall",
    transparent = false,
    terminal_colors = true,
    dim_inactive = false,
    styles = {
      comments = { italic = true },
      keywords = { italic = true },
      functions = {},
      variables = {},
      numbers = {},
      conditionals = {},
      constants = {},
      operators = {},
      strings = {},
      types = {},
      booleans = {},
      loops = {},
      properties = {},
    },
    default_integrations = true,
    integrations = {
      lazy = { enabled = true },
      telescope = { enabled = true, style = "borderless" },
      illuminate = { enabled = false },
      treesitter = { enabled = true, context = true },
      lspconfig = { enabled = true },
      flash = { enabled = true },
      trouble = { enabled = true },
      dashboard = { enabled = true },
      cmp = { enabled = true },
      neo_tree = { enabled = true },
    },
    color_overrides = {},
    highlight_overrides = {},
  }

<
------------------------------------------------------------------------------
                                                     *nightfall.nvim_overriding*
Enhance the customization of Nightfall even further by overriding colors and
highlight groups to suit your preferences. Nightfall.nvim offers extensive
options for tailoring the colorscheme precisely to your liking. You can
achieve this by utilizing `color_overrides` and `highlight_overrides` in the
configuration.

It's important to note that flavor-specific overrides always have the highest
priority.

Example:
>lua
  require("nightfall").setup({
    color_overrides = {
      all = {
        foreground = "#ffffff",
      },
      nightfall = {
        background = "#ff0000",
      },
    },
    highlight_overrides = {
      all = { -- User can only use table for `all`, this will apply for all flavors
        Normal = { bg = "#120809" },
      },
      -- @param colors NightfallPalette
      nightfall = function(colors) -- Can be a function or a table for specific flavor
        return {
          Normal = { bg = colors.black },
        }
      end,
      maron = {
        Normal = { fg = "#ffffff" }
      },
    },
  })
<
------------------------------------------------------------------------------
                                                   *nightfall.nvim_integrations*
Nightfall.nvim seamlessly integrates with various Neovim plugins through
its integration feature. This allows for enhanced functionality and a
more cohesive user experience.

Example:
>lua
  require("nightfall").setup({
    integrations = {
      lazy = { enabled = true },
      telescope = { enabled = true, style = "borderless" },
      illuminate = { enabled = true },
      treesitter = { enabled = true, context = true },
      lspconfig = { enabled = true },
      flash = { enabled = false },
    }
  })
<

Certain integrations are enabled by default to provide a smooth
out-of-the-box experience. If you prefer to customize which integrations
are active, set `default_integrations` to `false`. For more details, see
|nightfall.nvim_defaults|.

------------------------------------------------------------------------------
                                                           *nightfall.nvim_lazy*
Enable `lazy.nvim` support by adding the following to your Nightfall integrations
config:
>lua
  lazy = { enabled = true }
<
------------------------------------------------------------------------------
                                                     *nightfall.nvim_illuminate*
Enable `vim-illuminate` support by adding the following to your Nightfall
integrations config:
>lua
  illuminate = { enabled = true }
<
------------------------------------------------------------------------------
                                                      *nightfall.nvim_lspconfig*
Enable `nvim-lspconfig` support by adding the following to your Nightfall
integration config:
>lua
  lspconfig = { enabled = true }
<
------------------------------------------------------------------------------
                                                     *nightfall.nvim_treesitter*
Enable `nvim-treesitter` with `nvim-treesitter-context` support
by adding this to your Nightfall integrations config:
>lua
  treesitter = { enabled = true, context = true }
<
------------------------------------------------------------------------------
                                                      *nightfall.nvim_telescope*
To enable `telescope.nvim` support, add the following to your Nightfall
integrations config, choosing between two styles: 'borderless' and
'bordered'.
>lua
  telescope = { enabled = true, style = "borderless" }
<
------------------------------------------------------------------------------
                                                          *nightfall.nvim_flash*
Enable `flash.nvim` support by adding the following to your Nightfall
integrations config:
>lua
  flash = { enabled = true }
<
------------------------------------------------------------------------------
                                                        *nightfall.nvim_trouble*
Enable `trouble.nvim` support by adding the following to your Nightfall
integration config:
>lua
  trouble = { enabled = true }
<
------------------------------------------------------------------------------
                                                      *nightfall.nvim_headlines*
Enable `headlines.nvim` support by adding the following to your Nightfall
integrations config:
>lua
  headlines = { enabled = true }
<
------------------------------------------------------------------------------
                                                      *nightfall.nvim_dashboard*
Enable `dashboard-nvim` support by adding the following to your Nightfall
integrations config:
>lua
  dashboard = { enabled = true }
<
------------------------------------------------------------------------------
                                                            *nightfall.nvim_dap*
Enable `nvim-dap` support by adding the following to your Nightfall
integrations config:
>lua
  nvim_dap = { enabled = true }
<
You must define sign icons to make it work. Here is a snippet for you:
>lua
  local signs = {
    { name = 'DapBreakpoint', text = '', texthl = 'DapBreakpoint' },
    { name = 'DapBreakpointCondition', text = '', texthl = 'DapBreakpointCondition' },
    { name = 'DapBreakpointRejected', text = '', texthl = 'DapBreakpointRejected' },
    { name = 'DapLogPoint', text = '󰛿', texthl = 'DapLogPoint' },
    { name = 'DapStopped', text = '󰁕', texthl = 'DapStopped' },
  }

  for _, sign in ipairs(signs) do
    vim.fn.sign_define(sign.name, { text = sign.text, texthl = sign.texthl })
  end
<
------------------------------------------------------------------------------
                                                            *nightfall.nvim_cmp*
Enable `nvim-cmp` support by adding the following to your Nightfall
integrations configuration:
>lua
  cmp = { enabled = true }
<
To enhance the appearance of `nvim-cmp`, include the following additional
configuration in your `nvim-cmp` setup:
>lua
  require("cmp").setup({
    window = {
      completion = {
        border = "rounded",
        winhighlight = "Normal:CmpPmenu,CursorLine:CmpSel,Search:None",
      },
      documentation = {
        border = "rounded",
        winhighlight = "Normal:CmpDoc",
      },
    },
    -- Add the rest of your nvim-cmp config here
  })
<
------------------------------------------------------------------------------
                                                       *nightfall.nvim_neo_tree*
Enable `neo-tree.nvim` support by adding the following to your Nightfall integrations
config:
>lua
  neo_tree = { enabled = true }
<
------------------------------------------------------------------------------
                                                        *nightfall.nvim_lualine*
To enable `lualine.nvim` support, you need to configure it in your Neovim setup.
Here's an example configuration:
>lua
  require("lualine").setup({
    options = {
      theme = "auto" -- Automatically detect and apply the right lualine theme
    }
    -- Add the rest of your lualine configuration here
  })
<
 vim:tw=78:ts=8:noet:ft=help:norl: